---
layout: post
title: "Java类加载"
date: "2017-07-26 19:12:27 +0800"
categories: JVM学习
tags: JVM
excerpt: JVM学习-Java Class Loader
mathjax: true
---

* content
{:toc}


## 类加载过程

类从被加载到虚拟机内存中开始，到卸载出内存为止，它的整个生命周期有：加载、验证、准备、解析、初始化、使用、卸载7个阶段，如下图
![image](../../../../public/img/jvm/类加载过程.jpg)

## 类的初始化

### 类和接口的初始化
1. <clinit>()方法对于类或接口来说并不是必须的，如果一个类没有静态语句块，也没有对变量的赋值操作，编译器可以不为这个类生成<clinit>()方法
2. 接口本来没有静态块，但是可以有赋值操作，所以还是可能执行<clinit>()方法
3. 子类执行<clinit>()方法，父类必须执行<clinit>()方法
4. 子接口执行<clinit>()方法，可以父接口可以不执行<clinit>()方法
5. <clinit>()方法，同步操作，会加锁，可能造成线程阻塞

### 会触发类初始化(主动引用)
1. 当虚拟机启动时，执行主类(包含main方法的类)会优先被初始化
2. 当初始化一个雷的时候，如果发现其父类还未初始化，则触发其父类初始化
3. 反射调用，如果类没有进行过初始化，则需要先触发其初始化
4. 使用new实例化对象、读取或设置一个雷的静态字段(final关键字修饰除外)、调用类的静态方法(在类文件结构中，即new、getstatic、putstatic、invokestatic指令)
5. 对象反序列化，会触发类的初始化
6. JDK1.7动态语言支持是，java.lang.invoke.Methodhandle实例结果REF_getStatic、REF_putStatic、REF_invokeStatic句柄，触发类的初始化(我暂时还没遇到过)


### 不会触发类初始化(被动引用)
1. 无使用子类的字段，不会触发子类的初始化
2. 数组声明，不会触发类的初始化
3. 直接调用final常量，不会触发类的初始化

{% highlight Java %}
// SuperClass
public class SuperClass {
  public static int value = 123;
  public static final String HELLO = "hello world";
  static {
    System.out.println("SuperClass init!");
  }
}
// SubClass
public class SubClass extends SuperClass {
  static {
    System.out.println("SubClass init");
  }
}
// -----------------------------
// Scene1
public class Scene1 {
  public static void main(String[] args) {
    System.out.println(SubClass.value);
  }
}
/* 输出
SuperClass init!
123
 */
// -----------------------------
// Scene2
public class Scene2 {
  public static void main(String[] args) {
    SuperClass[] superClasses = new SuperClass[10];
  }
}
/* 输出
 */
// -----------------------------
// Scene3
public class Scene3 {
  public static void main(String[] args) {
    System.out.println(SuperClass.HELLO);
  }
}
/* 输出
hello world
 */
{% endhighlight %}

## 类加载器

![image](../../../../public/img/jvm/类加载器.png)

1. 启动类加载器(Bootstrap ClassLoader) => 负责加载<JAVA_HOME>/lib目录中的，或者被-Xbootclasspath参数指定的路径中的
2. 扩展类加载器(Extension ClassLoader) => 负责加载<JAVA_HOME>/lib/ext目录中的，或者被java.ext.dirs系统变量所指定的路径中的
3. 应用程序类加载器(Application ClassLoader) => 负责加载--classpath参数指定的路径中的
4. 自定义类加载器
5. 不同类加载器加载到的同一个class文件所得到的Class对象是不同的

{% highlight Java %}
package com.loader;

import java.io.IOException;
import java.io.InputStream;

public class MyClassLoader {
  public static void main(String[] args) throws Exception {
    ClassLoader myLoader1 = new ClassLoader() {
      @Override
      public Class<?> loadClass(String name) throws ClassNotFoundException {
        try {
          String fileName = name.substring(name.lastIndexOf(".") + 1) + ".class";
          InputStream is = getClass().getResourceAsStream(fileName);
          if (is == null) {
            return super.loadClass(name);
          }
          byte[] b = new byte[is.available()];
          is.read(b);
          return defineClass(name, b, 0, b.length);
        } catch (IOException e) {
          throw new ClassNotFoundException(name);
        }
      }
    };
    ClassLoader myLoader2 = new ClassLoader() {
      @Override
      public Class<?> loadClass(String name) throws ClassNotFoundException {
        try {
          String fileName = name.substring(name.lastIndexOf(".") + 1) + ".class";
          InputStream is = getClass().getResourceAsStream(fileName);
          if (is == null) {
            return super.loadClass(name);
          }
          byte[] b = new byte[is.available()];
          is.read(b);
          return defineClass(name, b, 0, b.length);
        } catch (IOException e) {
          throw new ClassNotFoundException(name);
        }
      }
    };
    Class<?> aClass1 = myLoader1.loadClass("com.loader.MyClassLoader");
    Class<?> aClass2 = myLoader2.loadClass("com.loader.MyClassLoader");
    System.out.println(aClass1.equals(aClass2));
    Object obj = aClass1.newInstance();
    System.out.println(obj instanceof com.loader.MyClassLoader);
  }
}
/* 输出
false
false
 */
{% endhighlight %}
总结：对于同一个class文件，被同一个虚拟机在家，只要加载它们的类加载器不同，那这两个类就必定不相等(包括equals()方法、isAssignableFrom()方法、isInstance()方法、instanceof操作等等)

## 双亲委派模型

![image](../../../../public/img/jvm/查找类过程.jpg)

{% highlight Java %}
// ClassLoader源码
protected Class<?> loadClass(String name, boolean resolve)
        throws ClassNotFoundException
    {
        synchronized (getClassLoadingLock(name)) {
            // First, check if the class has already been loaded
            Class<?> c = findLoadedClass(name);
            if (c == null) {
                long t0 = System.nanoTime();
                try {
                    if (parent != null) {
                        c = parent.loadClass(name, false);
                    } else {
                        c = findBootstrapClassOrNull(name);
                    }
                } catch (ClassNotFoundException e) {
                    // ClassNotFoundException thrown if class not found
                    // from the non-null parent class loader
                }

                if (c == null) {
                    // If still not found, then invoke findClass in order
                    // to find the class.
                    long t1 = System.nanoTime();
                    c = findClass(name);

                    // this is the defining class loader; record the stats
                    sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);
                    sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);
                    sun.misc.PerfCounter.getFindClasses().increment();
                }
            }
            if (resolve) {
                resolveClass(c);
            }
            return c;
        }
    }
   {% endhighlight %}
1. 从上层开始查找对应的Class文件
2. 这样就保证了类似java.lang.String这些基础包足够安全
3. 线程上下文类加载器，用于破坏双亲委派模型，为了适用于SPI代码
4. Web环境(eg: tomcat), 该类加载器也使用代理模式，所不同的是它是首先尝试去加载某个类，如果找不到再代理给父类加载器。这与一般类加载器的顺序是相反的


## loadClass和findClass

1. 由于双亲模型JDK1.2才出现，为了兼容之前的版本，特意添加了findClass()方法
2. 从源码中可以看出loadClass()方法是完全遵循双亲委托模型的
3. 自定义ClassLoader，唯一目的就是去重写loadClass()方法，通过loadClass回调findClass方法，再重写findClass方法，推荐这种写法

## 线程上下文类加载器
1. Thread. setContextClassLoader()
2. 是一个角色
3. 用以解决顶层ClassLoader无法访问底层ClassLoader的类的问题
4. 基本思想是，在顶层ClassLoader中，传入底层ClassLoader的实例
5. Tomcat的WebappClassLoader 就会先加载自己的Class，找不到再委托parent
6. OSGi的ClassLoader形成网状结构，根据需要自由加载Class
