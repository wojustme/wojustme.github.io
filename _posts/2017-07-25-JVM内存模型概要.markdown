---
layout: post
title: "JVM内存模型概要"
date: "2017-07-25 17:12:27 +0800"
categories: JVM学习
tags: JVM
excerpt: JVM学习-JVM内存模型一些名词解析
mathjax: true
---

* content
{:toc}

## 啥也不说，看图说话

![image](../../../../public/img/jvm/JVM内存中各个区的结构.png)

在多核大行其道的今天，多线程不必多说。按照线程私有性，划分为两个主要区域线程共享区、线程私有区:

1. 线程共享--方法区 => 线程共享，存储已被虚拟机加载的类信息、常量（1.7后在堆）、静态变量、即时编译器编译后的代码
2. 线程共享--Java堆 => 存放所有对象实例
3. 线程私有--虚拟机栈 => 局部变量表、操作数栈、动态链接、出口
4. 线程私有--程序计数器 => 当前线程正在执行的字节码指令地址
5. 线程私有--本地方法区 => 执行native方法区域

其实还少两种区域：**常量池**和**直接内存**。
1. 常量池 => 方法区的一部分，那么显然就是线程共享的
2. 直接内存 => NIO中的Buffer缓冲区，线程私有

## 常量池

个人觉得常量池这一部分最好理解，就先总结了，下列代码挺能说明问题的。

{% highlight Java %}
// Conf1.java
public class Conf1 {
  public static String name1 = "hello";
  public static String name2 = "hello";
  public static String name3 = "he" + "llo";
  public static String name4 = "he" + new String("llo");
  public static String name5;
  public static String name6;
  static {
    name5 = "hello";
    name6 = getName6();
  }
  public static String getName6() {
    return "hello";
  }
}
// Conf2.java
public class Conf2 {
  public static String name1 = "hello";
}
// Main.java
public class Main {
  public static void main(String[] args) {
    System.out.println(Conf1.name1 == Conf1.name2); // true
    System.out.println(Conf1.name1 == Conf1.name3); // true
    System.out.println(Conf1.name1 == Conf1.name4); // false
    System.out.println(Conf1.name1 == Conf1.name5); // true
    System.out.println(Conf1.name1 == Conf1.name6); // true
    System.out.println(Conf1.name1 == Conf2.name1); // true
  }
}
{% endhighlight %}

1. 当该Main运行时，JVM装载Conf1和Conf2类，分别对其解析、分析得出含有"hello"这个字符串常量
2. 其中Conf1的name1, name2, name3, name5, name6, 以及Conf2的name1都执行同一个常量hello的内存地址，所以Conf1.name1 == Conf1.name2 == Conf1.name3 == Conf1.name5 == Conf1.name6 == Conf2.name1
3. 而Conf1中的name4用了new String，指向了新的内存地址，所以不可能跟其他的name相等了
4. 注意的是，常量池是运行时常量池，即可以多个Java文件中共享一个常量池，与类信息无关


## 虚拟机栈--Java栈(小重点)

**线程安全**、栈帧(局部变量、操作数栈、动态连接、方法返回地址)

### 局部变量
1. 存放编译期可知的各种基本数据类型、对象引用类型和returnAddress类型(指向一条字节码指令的地址：函数返回地址)
2. 可能引起StackOverFlowError => 线程请求的栈帧深度大于虚拟机所允许的深度(函数递归调用可能触发)
3. 可能引起OutOfMemorError => 该函数栈无法申请到足够的内存
4. 配置信息: -Xms20m -> 堆最小值20M、-Xmx20m -> 堆最大值20M、-Xss -> 设置栈容量
5. 区分栈内分配内存空间(栈运行完，自动回收，不占堆空间)，如下代码

{% highlight Java %}
public class OnStackTest {
    public static void alloc(){
        byte[] b = new byte[2];
        b[0] = 1;
    }
    public static void main(String[] args) {
        long b = System.currentTimeMillis();
        for(int i = 0; i < 100000000; i++){
            alloc();
        }
        long e = System.currentTimeMillis();
        System.out.println(e - b);
    }
}
/** 栈内分配
-server -Xmx10m -Xms10m
-XX:+DoEscapeAnalysis -XX:+PrintGC
输出 => 5
*/
/** 堆上分配
-server -Xmx10m -Xms10m
-XX:-DoEscapeAnalysis -XX:+PrintGC
输出 => [GC 3550K->478K(10240K), 0.0000977 secs]
[GC 3550K->478K(10240K), 0.0001361 secs]
……
564
*/
{% endhighlight %}

总结：如果小对象（一般几十个bytes），在没有逃逸的情况下，可以直接分配在栈上，可以自动回收，减轻GC压力(大对象或者逃逸对象无法栈上分配)

### 操作数栈
1. 后进先出LIFO，最大深度由编译期确定
2. 操作数栈可以存放一个jvm中定义的任意数据类型的值
3. 在任意时刻，操作数栈都一个固定的栈深度，基本类型除了long、double占用两个深度，其它占用一个深度
4. 指令不细说了...😈

### 动态连接
1. 每个栈帧都包含一个指向运行时常量池中该栈帧所属方法的引用，持有这个引用是为了支持方法调用过程中的动态链接
2. Class文件的常量池中存在有大量的符号引用，字节码中的方法调用指令就以常量池中指向方法的符号引用为参数
3. 静态解析 => 在类加载阶段或第一次使用的时候转化为直接引用(如final、static域等)
4. 动态连接 => 运行时转化成直接引用(反射就是通过这种动态链接搞起来的，在Java的世界中，无反射无框架)

### 方法返回地址
1. 正常退出 => 调用者的PC计数器的值就可以作为返回地址，栈帧中很可能保存了这个计数器值
2. 异常退出 => 返回地址是要通过异常处理器来确定的，栈帧中一般不会保存这部分信息
3. 方法退出的过程实际上等同于把当前栈帧出栈，因此退出时可能执行的操作有：恢复上层方法的局部变量表和操作数栈，如果有返回值，则把它压入调用者栈帧的操作数栈中，调整PC计数器的值以指向方法调用指令后面的一条指令

## Java堆(小重点)

**线程共享**、new创建的对象实例和数组、常量(1.7以后)、空间分代

### 分代示意图
![image](../../../../public/img/jvm/Java堆分代示意图.png)
1. s0区和s1区等大小
2. 对象实例创建后在堆中顺序(年龄顺序): eden区 -> s0区(s1区) -> tenured区
3. 年龄一般是根据该对象经过几次gc后，来计算得出。
4. 大对象可能会直接存储到老年代(tenured区)
5. JVM回收对象是根据年龄代和GC算法共同决定的

### 垃圾收集算法
1. 标记-清除算法
2. 复制算法(回收新生代)
3. 标记-整理算法(老年代)
4. 分代收集算法

### 引用分类
1. 强引用: Object obj = new Object()
2. 软引用: 用来描述一些还有用但并非必须的对象。触发条件，在系统将要发生内存溢出异常之前，会二次回收。SoftReference类实现软引用。
3. 弱引用: 作用与软引用类似。触发条件，在下一次垃圾收集发生之前，无论内存是否足够。WeakReference实现弱引用。
4. 虚引用: 作用，能在这个对象被收集器回收时收到一个系统通知。PhantomReference实现虚引用。

### 对象的finalize方法
1. 任何一个对象的finalize()方法都只会被系统自动调用一次
2. 让该对象复活方法，需要重新与引用链上的任何一个对象建立关联
{% highlight Java %}
public class FinalizeEscapeGC {
  public static FinalizeEscapeGC SAVE_HOOK = null;
  public void isAlive() {
    System.out.println("yes, i am still alive :)");
  }
  @Override
  protected void finalize() throws Throwable {
    super.finalize();
    System.out.println("finalize method executed!");
    FinalizeEscapeGC.SAVE_HOOK = this;
  }
  public static void main(String[] args) throws Throwable {
    SAVE_HOOK = new FinalizeEscapeGC();
    SAVE_HOOK = null;
    System.gc();
    // 因为finalize方法优先级很低，所以暂停0.5秒等待它
    Thread.sleep(500);
    if (SAVE_HOOK != null) {
      SAVE_HOOK.isAlive();
    } else {
      System.out.println("no, iam dead :(");
    }
    // 自救失败
    SAVE_HOOK = null;
    System.gc();
    Thread.sleep(500);
    if (SAVE_HOOK != null) {
      SAVE_HOOK.isAlive();
    } else {
      System.out.println("no, iam dead :(");
    }
  }
}
{% endhighlight %}
总结:
1. 对象可以在被GC时自我拯救。
2. 这种自救的机会只有一次，因为一个对象的finalize()方法最多只会被系统自动调用一次。

## 方法区

**线程共享**、也称永久区、存储类信息

1. 这个类型的完整有效名
2. 这个类型直接父类的完整有效名(除非这个类型是interface或是java.lang.Object，两种情况下都没有父类)
3. 这个类型的修饰符(public,abstract, final的某个子集)
4. 这个类型直接接口的一个有序列表
5. 类型的常量池( constant pool)
6. 域(Field)信息
7. 方法(Method)信息
8. 除了常量外的所有静态(static)变量

## 直接内存

在NIO中，Java程序直接与内存打交道，虽然操作的是直接内存，但是也会被GC算法回收垃圾空间

{% highlight Java %}
// TestDirectByteBuffer
import java.nio.ByteBuffer;
public class TestDirectByteBuffer {
  // -verbose:gc -XX:+PrintGCDetails -XX:MaxDirectMemorySize=40M
  public static void main(String[] args) throws Exception {
    while (true) {
      ByteBuffer buffer = ByteBuffer.allocateDirect(10 * 1024 * 1024);
    }
  }
}
// TestUnsafeMemo
import sun.misc.Unsafe;
public class TestUnsafeMemo {
  // -XX:MaxDirectMemorySize=40M
  public static void main(String[] args) throws Exception {
    Unsafe unsafe = GetUsafeInstance.getUnsafeInstance();
    while (true) {
      long pointer = unsafe.allocateMemory(1024 * 1024 * 20);
      System.out.println(unsafe.getByte(pointer + 1));
      // 如果不释放内存,运行一段时间会报错java.lang.OutOfMemoryError
      // unsafe.freeMemory(pointer);
    }
  }
}
// 借鉴http://blog.csdn.net/aitangyong/article/details/39323125例子
{% endhighlight %}
总结
1. TestDirectByteBuffer会不停去触发GC操作
2. TestUnsafeMemo不会触发GC操作
3. 因此: Unsafe分配直接内存，需要手动回收内存空间
