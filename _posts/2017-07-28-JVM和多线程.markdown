---
layout: post
title: "JVM和多线程"
date: "2017-07-28 22:12:27 +0800"
categories: JVM学习
tags: JVM
excerpt: JVM学习-JVM和多线程
mathjax: true
---

* content
{:toc}

## 内存模型

在了解JVM对于多线程的模型之前，我们先了解一下什么是物理计算机的并发。在计算机设计中CPU的运行速度远快于主存的存取速度，总不能把CPU的时间浪费在主存存取数据上，就加一级缓存、二级缓存……

**多核CPU架构中缓存**

![image](../../../../public/img/jvm/计算机缓存图.png)

每个CPU都有一个缓存，CPU通过缓存来与主存进行数据操作。当然缓存的引入就会导致缓存的一致性问题，然后有各种协议来保证，MSI、MESI……巴拉巴拉一堆不说了。

**同样类比，JVM的内存模型很类似，如下图**
![image](../../../../public/img/jvm/JVM多线程内存模型.png)

真正的数据在主内存中，每个线程开启，都会把数据拷贝一份副本到自己的工作内存中去，显然也就会引起不一致的问题。

## 内存之间的操作

1. lock => 锁定, 作用于主内存变量，它把一个变量标识为一条线程独占状态
2. unlock => 解锁, 作用于主内存变量，释放之前的锁，给别的线程去锁定
3. read => 读取, 作用于主内存变量，具体如下图
4. load => 载入, 作用于工作内存变量，具体如下图
5. use => 使用, 作用于工作内存变量，具体如下图
6. assign => 赋值, 作用于工作内存变量，具体如下图
7. store => 存储, 作用于工作内存变量，具体如下图
8. write => 写入, 作用于主内存变量，具体如下图

![image](../../../../public/img/jvm/JVM内存间操作.png)

显然
1. 每一个操作具有原子性
2. 主内存 => 工作内存 (先read再load)
3. 工作内存 => 主内存 (先store再write)
4. 工作内存 => CPU (use)
5. CPU => 工作内存 (assign)

**必须遵循8个原则**
1. 不允许read和load、store和write操作之一单独出现
2. 不允许一个线程丢弃它的最近的assign操作，即变量在工作内存中改变了之后必须把该变化同步回主内存
3. 不允许一个线程无原因地(没有发生过任何assign操作)把数据从线程的工作内存同步回主内存中
4. 一个新的变量只能在主内存中“诞生”，不允许在工作内存中直接使用一个未被初始化(load或assign)的变量，即对一个变量实施use、store操作之前，必须先执行过了assign和load操作
5. 一个变量在同一个时刻只允许一条线程对其进行lock操作，但lock操作可以被同一条线程重复执行多次，多次执行lock后，只有执行相同次数的unlock操作，变量才会被解锁
6. 如果对一个变量执行lock操作，那将会清空工作内存此变量的值(清除副本)，在执行引擎使用这个变量钱，需要重新执行load或assign操作初始化该变量的值
7. 如果一个变量事先没有被lock操作锁定，那就不允许对它执行unlock操作，也不允许unlock一个被其他线程锁定住的变量
8. 对一个变量执行unlock之前，必须先把此变量同步会主内存中(执行store、write操作)


## 并发三大特性

### 原子性

1. 小范围的原子性 => Java的基本类型的读写单一操作都具有原子性(long和double这两种64位操作看情况)
2. 大范围的原子性 => 通过synchronized块之间的操作，它的字节码指令即monitorenter和monitorexit

### 可见性

1. 当一个线程修改了共享变量的值，其他线程能够立即得知这个修改
2. volatile、synchronized、final(除this引用逃逸情况外，即初始化了一半的对象，针对这个问题，后面会专门研究一下)

### 有序性

1. 在本线程内观察，所有的操作都是有序的
2. 如果在一个线程中观察另一个线程，所有的操作都是无序的。
3. volatile和synchronized可以保证有序性

## volatile关键字解析

1. 线程存储操作完变量，强制刷入主内存
2. 线程读取变量，强制从主内存刷入最新值
3. 基本类型变量更新时，不依赖其他变量(包括自己变量)，可以等同于该变量操作具有原子性
4. 单例模式

{% highlight Java %}
public class Singleton {
  private volatile static Singleton instance;
  private Singleton() {
  }
  public static Singleton getInstance() {
    if (instance == null) {
      synchronized (Singleton.class) {
        if (instance == null) {
          instance = new Singleton();
        }
      }
    }
    return instance;
  }
}
{% endhighlight %}
总结：这里使用volatile关键字，可以保证该变量对于多线程的可见性。在不使用volatile关键字的条件下，假设有两个线程A、B来获得单例，当线程A检测到实例不存在，则开始创建，等创建完成，实例instance没有及时回写到主内存，让线程B知道，线程B没检测到实例存在，又去创建一遍，那么会创建多次实例，导致错误。


## Java语言层次的线程状态

1. 新建 => 创建后尚未启动的线程
2. 运行 => 包括操作系统线程状态的Running和Ready
3. 无限期等待 => 不会被分配CPU执行时间，等待被其他线程显示唤醒(没有设置时间的Object.wait、没有设置时间的Thread.join、LockSupport.park)
4. 限期等待 => 不会被分配CPU执行时间，是被操作系统来唤醒，无须其他线程显示唤醒(Thread.sleep、设置时间的Object.wait、设置时间的Thread.join、LockSupport.parkNanos、LockSupport.parkUntil)
5. 阻塞 => 等待获取一个排它锁，另一个线程放弃这个锁时即可发生
6. 结束 => 线程结束执行

## JVM的锁机制

### 对象头Mark

1. Mark World，对象头的标记，32位
2. 描述对象的hash、锁信息、垃圾回收标记、年龄
3. 指向锁记录的指针
4. 指向monitor的指针
5. GC标记
6. 偏向锁线程ID

### 偏向锁

1. 所谓偏向，就是偏心，即锁会偏向于当前已经占有锁的线程
2. 大部分情况是没有竞争的，所以可以通过偏向来提高性能
3. 将对象Mark的标记设置为偏向，并将线程ID写入对象头Mark中
4. 只要没有竞争，获得偏向锁的线程，在将来进入同步块，不要同步，当其他线程请求相同的锁是，偏向模式结束
5. 默认开启(-XX:+UseBiasedLocking)
6. 在竞争激烈的场合，偏向锁会增加系统负担

{% highlight Java %}
public class BiasLock {
  public static List<Integer> numberList = new Vector<>();
  public static void main(String[] args) {
    long begin = System.currentTimeMillis();
    int count = 0;
    int startnum = 0;
    while (count < 10000000) {
      numberList.add(startnum);
      startnum += 2;
      count++;
    }
    long end = System.currentTimeMillis();
    System.out.println(end - begin);
  }
}
/* 输出
-XX:+UseBiasedLocking -XX:BiasedLockingStartupDelay=0 => 2925
// BiasedLockingStartupDelay=0，jvm设计者认为系统刚开始运行，竞争比较激烈，会延迟几秒开启偏向锁
-XX:-UseBiasedLocking => 3308
*/
{% endhighlight %}

### 轻量级锁

![image](../../../../public/img/jvm/轻量级锁.png)

1. BasicObjectLock => 嵌入在线程栈中的对象
2. 快速锁定方法
3. 如果如果对象没有被锁定，将对象头的Mark指针保存到锁对象中，将对象头设置为指向锁的指针（在线程栈空间中）
4. 如何判断线程是否持有这把锁，即判断这个对象的对象头所指向的指针是否在这个线程栈中，如果是，则持有锁；否则反之
5. 如果轻量级锁失败，表示存在竞争，升级为重量级锁（常规锁）
6. 在没有锁竞争的前提下，减少传统锁使用OS互斥量产生的性能损耗
7. 在竞争激烈时，轻量级锁会多做很多额外操作，导致性能下降


### 自旋锁

1. **当竞争存在时**，如果线程可以很快获得锁，那么可以不在OS层挂起线程，让线程做几个空操作（自旋）
2. 利用几个CPU的空转指令代替线程的挂起，唤醒等操作切换时间
3. JDK1.6中-XX:+UseSpinning开启，JDK1.7中，去掉此参数，改为内置实现
4. 如果同步块很长，自旋失败，会降低系统性能
5. 如果同步块很短，自旋成功，节省线程挂起切换时间，提升系统性能
6. while(true){}、for(;;){}

### 总结

**不是Java语言层面的锁优化**
1. 偏向锁可用会先尝试偏向锁
2. 轻量级锁可用会先尝试轻量级锁
3. 以上都失败，尝试自旋锁
4. 再失败，尝试普通锁，使用OS互斥量在操作系统层挂起


## 锁优化

1. 减少锁持有时间(只锁需要同步的步骤)
2. 减少锁粒度(ConcurrentHashMap，将一个大的Map分段，针对每个段都可以让多个线程进入，从而提高了大Map的并发量)
3. 锁分离(ReadWriteLock、读多写少的情况，可以提高性能) => LinkedBlockingQueue
4. 锁粗化(连续请求同一把锁，不如把中间不需要同步且执行很快的代码块，使用一个锁包在一起)


## 锁消除

{% highlight Java %}
public class RemoveLock {
  public static final int CIRCLE = 20000000;
  public static void main(String[] args) {
    long start = System.currentTimeMillis();
    for (int i = 0; i < CIRCLE; i++) {
      craeteStringBuffer("JVM", "Diagnosis");
    }
    long bufferCost = System.currentTimeMillis() - start;
    System.out.println("craeteStringBuffer: " + bufferCost + " ms");

  }
  public static String craeteStringBuffer(String s1, String s2) {
    StringBuffer sb = new StringBuffer();
    sb.append(s1);
    sb.append(s2);
    return sb.toString();
  }
}
/* 输出
-server -XX:+DoEscapeAnalysis -XX:+EliminateLocks => craeteStringBuffer: 2772 ms
-server -XX:+DoEscapeAnalysis -XX:-EliminateLocks => craeteStringBuffer: 2876 ms
锁消除是基于对象的逃逸分析
 */
{% endhighlight %}
总结： StringBuffer的append方法具有同步功能，但是变量sb是jvm栈内部，线程安全，所以，在craeteStringBuffer方法中可以让JVM消除掉StringBuffer的锁操作


## 无锁操作

1. 乐观锁一中表现形式
2. CAS(Compare And Swap) => 非阻塞的同步，操作(V、E、N三个数)，V表示要更新的变量、E表示期望值、N表示新的值，当且晋档V == E,则把N赋值给V
3. java.util.concurrent.atomic包下各种原子类，不细说。
4. 基于CPU指令硬件层实现
