---
layout: post
title: "JVM的GC总结"
date: "2017-07-31 16:12:27 +0800"
categories: JVM学习
tags: JVM
excerpt: JVM学习-GC总结
mathjax: true
---

* content
{:toc}

## GC算法

### 引用计数法

1. 引用计数器的实现很简单，对于一个对象A，只要有任何一个对象引用了A，则A的引用计数器就加1，当引用失效时，引用计数器就减1。只要对象A的引用计数器的值为0，则对象A就不可能再被使用。
2. 问题1 => 引用和去引用伴随加法和减法，影响性能
3. 问题2 => 很难处理循环引用

### 标记清除法

1. 标记-清除算法将垃圾回收分为两个阶段：标记阶段和清除阶段。一种可行的实现是，在标记阶段，首先通过根节点，标记所有从根节点开始的可达对象。因此，未被标记的对象就是未被引用的垃圾对象。然后，在清除阶段，清除所有未被标记的对象。
![image](../../../../public/img/jvm/标记清除算法.png)


### 标记压缩法

1. 和标记-清除算法一样，标记-压缩算法也首先需要从根节点开始，对所有可达对象做一次标记。但之后，它并不简单的清理未标记的对象，而是将所有的存活对象压缩到内存的一端。之后，清理边界外所有的空间。
2. 消除了标记清除算法中内存空洞
3. 适合用于存活对象较多的场合，如老年代
![image](../../../../public/img/jvm/标记压缩算法.png)

### 复制算法

1. 将原有的内存空间分为两块，每次只使用其中一块，在垃圾回收时，将正在使用的内存中的存活对象复制到未使用的内存块中，之后，清除正在使用的内存块中的所有对象，交换两个内存的角色，完成垃圾回收
2. 不适用于存活对象较多的场合 如老年代
![image](../../../../public/img/jvm/复制算法.png)

### 分代思想

1. 依据对象的存活周期进行分类，短命对象归为新生代，长命对象归为老年代。
2. 根据不同代的特点，选取合适的收集算法(少量对象存活，适合复制算法；大量对象存活，适合标记清理或者标记压缩)


## 可触及性

1. 所有的算法，需要能够识别一个垃圾对象，因此需要给出一个可触及性的定义
2. Java对象中三种状态：可触及的、可复活的、不可触及的。

### 什么是根？
1. 栈中引用的对象为根
2. 方法区中静态成员或者常量引用对象(即全局对象为根)
3. 本地方法栈中引用的对象


## GC停顿(Stop-The-World)

1. Java中一种全局暂停的现象
2. 全局停顿，所有Java代码停止，native代码可以执行，但不能和JVM交互
3. 多半由于GC引起(Dump线程、死锁检查、堆Dump)
4. 危害(长时间服务停止，没有响应、遇到HA系统，可能引起主备切换，严重危害生产环境)


## GC收集器设置

### 串行收集器

1. 效率高
2. 可能会产生较长的停顿
3. -XX:+UseSerialGC(新生代、老年代使用串行回收；新生代复制算法；老年代标记-压缩)

### 并行收集器

**ParNew**
1. Serial收集器新生代的并行版本
2. 复制算法
3. -XX:+UseParNewGC(新生代并行、老年代串行)
4. 多线程，需要多核支持
5. -XX:ParallelGCThreads 限制线程数量

**Parallel收集器**
1. 新生代复制算法
2. 老年代 标记-压缩
3. -XX:+UseParallelGC(使用Parallel收集器 + 老年代串行)
4. -XX:+UseParallelOldGC(使用Parallel收集器 + 并行老年代)

**并行收集器的一些配置**
1. -XX:MaxGCPauseMills => 最大停顿时间，单位毫秒; GC尽力保证回收时间不超过设定值
2. -XX:GCTimeRatio => 0-100的取值范围; 垃圾收集时间占总时间的比; 默认99，即最大允许1%时间做GC
3. 这两个参数是矛盾的。因为停顿时间和吞吐量不可能同时调优

### CMS收集器

1. Concurrent Mark Sweep 并发标记清除(与用户线程一起执行)
2. 单纯的一个老年代的收集器
3. -XX:+UseConcMarkSweepGC
4. 尽可能降低停顿、清理不彻底、因为和用户线程一起运行，不能在空间快满时再清理
5. -XX:+UseCMSCompactAtFullCollection (Full GC后，进行一次整理，整理过程是独占的，会引起停顿时间变长)
6. -XX:+CMSFullGCsBeforeCompaction(设置进行几次Full GC后，进行一次碎片整理)
7. -XX:ParallelCMSThreads(设定CMS的线程数量)

**收集过程**
1. 初始标记
2. 并发标记（和用户线程一起）
3. 重新标记
4. 并发清除（和用户线程一起）


## GC参数整理

1. -XX:+UseSerialGC：在新生代和老年代使用串行收集器
2. -XX:SurvivorRatio：设置eden区大小和survivior区大小的比例
3. -XX:NewRatio:新生代和老年代的比
4. -XX:+UseParNewGC：在新生代使用并行收集器
5. -XX:+UseParallelGC ：新生代使用并行回收收集器
6. -XX:+UseParallelOldGC：老年代使用并行回收收集器
7. -XX:ParallelGCThreads：设置用于垃圾回收的线程数
8. -XX:+UseConcMarkSweepGC：新生代使用并行收集器，老年代使用CMS+串行收集器
9. -XX:ParallelCMSThreads：设定CMS的线程数量
10. -XX:CMSInitiatingOccupancyFraction：设置CMS收集器在老年代空间被使用多少后触发
11. -XX:+UseCMSCompactAtFullCollection：设置CMS收集器在完成垃圾收集后是否要进行一次内存碎片的整理
12. -XX:CMSFullGCsBeforeCompaction：设定进行多少次CMS垃圾回收后，进行一次内存压缩
13. -XX:+CMSClassUnloadingEnabled：允许对类元数据进行回收
14. -XX:CMSInitiatingPermOccupancyFraction：当永久区占用率达到这一百分比时，启动CMS回收
15. -XX:UseCMSInitiatingOccupancyOnly：表示只在到达阀值的时候，才进行CMS回收
