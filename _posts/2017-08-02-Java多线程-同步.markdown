---
layout: post
title: "Java多线程2"
date: "2017-08-02 19:00:00 +0800"
categories: Java
tags: Java多线程
excerpt: Java多线程的同步
mathjax: true
---

* content
{:toc}

## 内置锁(synchronized)
1. synchronized定义了临界区，每次只允许一个线程进入该临界区
2. 可以修饰方法名
3. 可以修饰实例对象，锁定实例
4. 可以修饰类对象，锁定类
5. 具有重入功能，当一个线程得到一个对象锁后，再次请求此对象锁时是可以再次得到该对象的锁的
6. 定制化较低，比如没法做出类似读写分离锁的功能

## 对象锁(接口Lock)
1. 至关重要的一点，使用Lock的方法必须要有try{}finally{}
2. 由于Lock是一个接口，它具有多种实现：ReentrantLock(重入锁)
3. 包含一个重要的功能tryLock，可以尝试去获取lock，会立即返回，可以依据锁获取情况的不同来进行流程
4. 锁释放一定放在fnally中，因为一些其他异常情况退出，会没法释放锁的

## 读写锁(接口ReadWriteLock)
1. 唯一实现类ReentrantReadWriteLock，读写分离
2. 读锁readLock实现了Lock接口
3. 写锁writeLock同样也实现了Lock接口
4. 类似可以自己实现一个读写锁

{% highlight Java %}
public class MyReadWriteLock {
  // 读锁的个数
  private int readers = 0;
  // 写锁的个数
  private int writers = 0;
  // 期待写的个数
  private int writeRequests = 0;
  public synchronized void lockRead() throws InterruptedException {
    // 如果写锁的个数或者期待拿到写锁的个数大于0，则阻塞
    while(writers > 0 || writeRequests > 0){
      wait();
    }
    readers++;
  }
  public synchronized void unlockRead(){
    // 释放读锁，通知其他的
    readers--;
    notifyAll();
  }
  public synchronized void lockWrite() throws InterruptedException {
    writeRequests++;
    // 如果读锁个数或者写锁个数大于0，则等待这两个锁的释放
    while(readers > 0 || writers > 0){
      wait();
    }
    // 获得写锁，将等待的期望写锁个数减1，写锁个数加1
    writeRequests--;
    writers++;
  }
  public synchronized void unlockWrite() throws InterruptedException {
    // 释放写锁，通知其他的
    writers--;
    notifyAll();
  }
}
{% endhighlight %}

## 条件同步Condition
1. 用来替代传统的Object的wait()、notify()实现线程间的协作
2. Condition依赖于Lock接口，生成一个Condition的基本代码是lock.newCondition()
3. 调用Condition的await()和signal()方法，都必须在lock保护之内，就是说必须在lock.lock()和lock.unlock之间才可以使用
4. Conditon的await() => Object的wait()、Condition中的signal() => Object的notify()；、Condition中的signalAll() => Object的notifyAll()
{% highlight Java %}
public class ConditionTest {
  final Lock lock = new ReentrantLock();
  final Condition condition = lock.newCondition();
  public static void main(String[] args) {
    ConditionTest test = new ConditionTest();
    Producer producer = test.new Producer();
    Consumer consumer = test.new Consumer();
    consumer.start();
    producer.start();
  }

  class Consumer extends Thread{
    @Override
    public void run() {
      consume();
    }
    private void consume() {
      try {
        lock.lock();
        System.out.println("我在等一个新信号"+this.currentThread().getName());
        condition.await();
      } catch (InterruptedException e) {
        e.printStackTrace();
      } finally{
        System.out.println("拿到一个信号"+this.currentThread().getName());
        lock.unlock();
      }
    }
  }

  class Producer extends Thread{
    @Override
    public void run() {
      produce();
    }
    private void produce() {
      try {
        lock.lock();
        System.out.println("我拿到锁"+this.currentThread().getName());
        condition.signalAll();
        System.out.println("我发出了一个信号："+this.currentThread().getName());
      } finally{
        lock.unlock();
      }
    }
  }
}
{% endhighlight %}

## JUC的同步类

### 信号量(Semaphore)
1. 一种计数器，保护一个或多个共享资源的访问
2. 只有该信号量的个数大于0，才可以去访问该共享资源；否则休眠直至个数大于0
3. 使用Semaphore时，必须指定个数，即该共享资源可同时供几个线程访问
4. 通过acquire方法获取信号量 => 操作共享资源 => release方法释放信号量
5. 使用acquire方法，当信号量的内部计数器变成0的时候，信号量将阻塞线程直到其被释放，线程在被阻塞的这段时间中，可能会被终端，从而导致acquire方法抛异常
6. 使用acquireUninterruptibly方法，会忽略掉中断异常
7. tryAcquire是试图拿去信号量，成功返回true，失败返回false


### 发令枪(CountDownLatch)
1. 应用场景：田径运动竞赛，每一个运动员都准备好了，听枪声一起竞争跑
2. 每一个都要等待某些操作，才可以视为准备好，它调用await方法，等待其他的所有操作完成，调用countDown方法将CountDownLatch计算器减1，当计数器为0时，CountDownLatch唤醒所有因为调用await方法而休眠的

{% highlight Java %}
public class CountDownLatchTest {
  // 模拟了100米赛跑，10名选手已经准备就绪，只等裁判一声令下。当所有人都到达终点时，比赛结束。
  public static void main(String[] args) throws InterruptedException {
    // 开始的倒数锁
    final CountDownLatch begin = new CountDownLatch(1);
    // 结束的倒数锁
    final CountDownLatch end = new CountDownLatch(10);
    // 十名选手
    final ExecutorService exec = Executors.newFixedThreadPool(10);
    for (int index = 0; index < 10; index++) {
      final int NO = index + 1;
      Runnable run = new Runnable() {
        public void run() {
          try {
            // 如果当前计数为零，则此方法立即返回。
            // 等待
            begin.await();
            Thread.sleep((long) (Math.random() * 10000));
            System.out.println("No." + NO + " arrived");
          } catch (InterruptedException e) {
          } finally {
            // 每个选手到达终点时，end就减一
            end.countDown();
          }
        }
      };
      exec.submit(run);
    }
    System.out.println("Game Start");
    // begin减一，开始游戏
    begin.countDown();
    // 等待end变为0，即所有选手到达终点
    end.await();
    System.out.println("Game Over");
    exec.shutdown();
  }
}
/* 输出
Game Start
No.3 arrived
No.7 arrived
No.1 arrived
No.8 arrived
No.9 arrived
No.4 arrived
No.10 arrived
No.6 arrived
No.5 arrived
No.2 arrived
Game Over
 */
{% endhighlight %}
总结：
1. Game Start最先输出，表示提示让各个线程开始准备(因为各个线程开始执行有休眠)
2. 各线程都准备好了，就一起动，此刻各线程是并发的
3. 当所有线程完成操作，触发end的countDown，当end计数器为0，则表示比赛结束

### 同步栅(CyclicBarrier)

这么一个应用场景：一个大任务分拆一步一步的小任务段，每个小任务段之间有依赖关系，而任务段可以细化互不相干的小任务。(类似大数据的BSP模型)
大致效果图，我在网上找到的，虽然是BSP模型，但是是适用于解释CyclicBarrier的

![image](../../../../public/img/multithread/BSP模型1.jpg)
![image](../../../../public/img/multithread/BSP模型2.png)
{% highlight Java %}
public class CyclicBarrierTest {
  public static void main(String[] args) {
    ExecutorService ThreadPool = Executors.newCachedThreadPool();
    final CyclicBarrier cyclic = new CyclicBarrier(3);
    for(int i=0;i<3;i++){
      Runnable runnable = new Runnable() {
        @Override
        public void run() {
          try {
            Thread.sleep((long) (Math.random()*3000));
            System.out.println("线程 " + Thread.currentThread().getName() + "即将到达线程集合点1，已有  " + (cyclic.getNumberWaiting()+1) + " 到达" + (cyclic.getNumberWaiting()==2 ? "都到齐，走吧": "继续等候"));
            cyclic.await();
            Thread.sleep((long) (Math.random()*3000));
            System.out.println("线程 " + Thread.currentThread().getName() + "即将到达线程集合点2，已有  " + (cyclic.getNumberWaiting()+1) + " 到达" + (cyclic.getNumberWaiting()==2 ? "都到齐，走吧": "继续等候"));
            cyclic.await();
            Thread.sleep((long) (Math.random()*3000));
            System.out.println("线程 " + Thread.currentThread().getName() + "即将到达线程集合点3，已有  " + (cyclic.getNumberWaiting()+1) + " 到达" + (cyclic.getNumberWaiting()==2 ? "都到齐，走吧": "继续等候"));
            cyclic.await();
          } catch (InterruptedException e) {
            e.printStackTrace();
          } catch (BrokenBarrierException e) {
            e.printStackTrace();
          }
        }
      };
      ThreadPool.execute(runnable);
    }
  }
}
/* 输出
线程 pool-1-thread-2即将到达线程集合点1，已有  1 到达继续等候
线程 pool-1-thread-3即将到达线程集合点1，已有  2 到达继续等候
线程 pool-1-thread-1即将到达线程集合点1，已有  3 到达都到齐，走吧
线程 pool-1-thread-3即将到达线程集合点2，已有  1 到达继续等候
线程 pool-1-thread-1即将到达线程集合点2，已有  2 到达继续等候
线程 pool-1-thread-2即将到达线程集合点2，已有  3 到达都到齐，走吧
线程 pool-1-thread-1即将到达线程集合点3，已有  1 到达继续等候
线程 pool-1-thread-3即将到达线程集合点3，已有  2 到达继续等候
线程 pool-1-thread-2即将到达线程集合点3，已有  3 到达都到齐，走吧
 */
{% endhighlight %}
总结：从程序中，很容易看出没到一个集合点，先到的线程等待未到的线程，等人齐了，再一起走。

### Phaser
个人用的比较少
1. 在功能上面它与CyclicBarrier、CountDownLatch有些重叠，但是它提供了更加灵活、强大的用法。
2. 把多个线程协作执行的任务划分为多个阶段，编程时需要明确各个阶段的任务，每个阶段都可以有任意个参与者，线程都可以随时注册并参与到某个阶段。
3. 怎么说呢，可以完全替代掉CountDownLatch和CyclicBarrier，并提供更加灵活的方式，来进行线程同步
4. 两种状态：active、termination
5. API：arrive, awaitAdvance, awaitAdvanceInterruptibly, register, bulkRegister

### Exchanger
允许任务之间进行数据交换，我自己没怎么用过，大致知道而已
{% highlight Java %}
public class ExchangerTest {
  public static void main(String[] args) {
    Exchanger<String> exchanger = new Exchanger<>();
    Car car = new Car(exchanger);
    Bike bike = new Bike(exchanger);
    car.start();
    bike.start();
    System.out.println("Main end!");
  }
}
class Car extends Thread {
  private Exchanger<String> exchanger;

  public Car(Exchanger<String> exchanger) {
    super("thread-car");
    this.exchanger = exchanger;
  }
  @Override
  public void run() {
    try {
      System.out.println(Thread.currentThread().getName() + "收到: " + exchanger.exchange("Car"));
    } catch (InterruptedException e) {
      e.printStackTrace();
    }
  }
}
class Bike extends Thread {
  private Exchanger<String> exchanger;

  public Bike(Exchanger<String> exchanger) {
    super("thread-bike");
    this.exchanger = exchanger;
  }
  @Override
  public void run() {
    try {
      System.out.println(Thread.currentThread().getName() + "收到: " + exchanger.exchange("Bike"));
    } catch (InterruptedException e) {
      e.printStackTrace();
    }
  }
}
{% endhighlight %}
总结：car线程就能到bike线程发送的数据Bike；且bike线程就能到car线程发送的数据Car
