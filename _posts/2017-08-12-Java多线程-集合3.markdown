---
layout: post
title: "Java多线程6"
date: "2017-08-12 12:00:00 +0800"
categories: Java
tags: Java多线程
excerpt: Java多线程-集合3
mathjax: true
---

* content
{:toc}

**对于JUC包，除了各种队列模型之外，还有KV结构和列表结构实现类**
1. ConcurrentHashMap
2. CopyOnWriteArrayList
3. CopyOnWriteArraySet

## ConcurrentHashMap的实现

在学习ConcurrentHashMap之前，还是优先看一下飞非线程安全的HashMap和线程安全的HashTable

### HashMap的实现
#### 字段
1. Node<K,V>[] table => 存放链表的数组
2. Set<Map.Entry<K,V>> entrySet => 存放着每一个元素实体
3. int size => kv数据的大小
4. int modCount =>
5. int threshold => 数组阈值
6. float loadFactor => hash的负载因子
7. int DEFAULT_INITIAL_CAPACITY => 初始化容量16，这个是数组长度
8. int MAXIMUM_CAPACITY => hashmap最大容量值
9. float DEFAULT_LOAD_FACTOR => 默认的负载因子
10. int TREEIFY_THRESHOLD => 转化tree时的阈值为8，从普通链表转换成树结构
11. int UNTREEIFY_THRESHOLD => 树切分时，至多为6
12. int MIN_TREEIFY_CAPACITY =>

#### 构造方法
1. public HashMap(int initialCapacity, float loadFactor)
2. public HashMap(int initialCapacity)
3. public HashMap()


#### 方法
- 添加KV数据：public V put(K key, V value)、public V putIfAbsent(K key, V value)
{% highlight Java %}
public V put(K key, V value) {
    return putVal(hash(key), key, value, false, true);
}
/**
* @param hash hash for key
* @param key the key
* @param value the value to put
* @param onlyIfAbsent if true, don't change existing value
* @param evict if false, the table is in creation mode.
* @return previous value, or null if none
*/
final V putVal(int hash, K key, V value, boolean onlyIfAbsent,
                   boolean evict) {
    // 获得当前存储的hash的数组存储为tab
    Node<K,V>[] tab; Node<K,V> p; int n, i;
    // 如果该数组为null，或者数组长度为0
    if ((tab = table) == null || (n = tab.length) == 0)
        // 重新创建
        n = (tab = resize()).length;
    // 如果经过hash计算后，入的数组桶为null，则创建一个新的链表节点挂载到第i个数组桶上
    if ((p = tab[i = (n - 1) & hash]) == null)
        tab[i] = newNode(hash, key, value, null);
    else {
        // 如果该桶存在元素
        Node<K,V> e; K k;
        // 如果链表的hash等于hash
        // 且头节点的key在基本数据类型相等，或者非空对象相等
        // 设置node节点设置为p
        if (p.hash == hash &&
            ((k = p.key) == key || (key != null && key.equals(k))))
            e = p;
        // 否则，如果p是树节点类型
        else if (p instanceof TreeNode)
            // 将按照tree模式插入值(红黑树)
            e = ((TreeNode<K,V>)p).putTreeVal(this, tab, hash, key, value);
        else {
            // 按照正常链表结构处理
            for (int binCount = 0; ; ++binCount) {
                if ((e = p.next) == null) {
                    p.next = newNode(hash, key, value, null);
                    // 如果达到转换红黑树阈值，则转换成红黑树
                    if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st
                        treeifyBin(tab, hash);
                    break;
                }
                if (e.hash == hash &&
                    ((k = e.key) == key || (key != null && key.equals(k))))
                    break;
                p = e;
            }
        }
        // 如果存在该数据节点
        if (e != null) { // existing mapping for key
            V oldValue = e.value;
            // 通过是否替代等判断，进行操作
            if (!onlyIfAbsent || oldValue == null)
                e.value = value;
            afterNodeAccess(e);
            return oldValue;
        }
    }
    ++modCount;
    // 根据个数和阈值来决定是否重新扩容
    if (++size > threshold)
        resize();
    afterNodeInsertion(evict);
    return null;
}
final Node<K,V>[] resize() {
    Node<K,V>[] oldTab = table;
    int oldCap = (oldTab == null) ? 0 : oldTab.length;
    int oldThr = threshold;
    int newCap, newThr = 0;
    if (oldCap > 0) {
        if (oldCap >= MAXIMUM_CAPACITY) {
            threshold = Integer.MAX_VALUE;
            return oldTab;
        }
        else if ((newCap = oldCap << 1) < MAXIMUM_CAPACITY &&
                 oldCap >= DEFAULT_INITIAL_CAPACITY)
            newThr = oldThr << 1; // double threshold
    }
    else if (oldThr > 0) // initial capacity was placed in threshold
        newCap = oldThr;
    else {               // zero initial threshold signifies using defaults
        newCap = DEFAULT_INITIAL_CAPACITY;
        newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);
    }
    if (newThr == 0) {
        float ft = (float)newCap * loadFactor;
        newThr = (newCap < MAXIMUM_CAPACITY && ft < (float)MAXIMUM_CAPACITY ?
                  (int)ft : Integer.MAX_VALUE);
    }
    threshold = newThr;
    @SuppressWarnings({"rawtypes","unchecked"})
        Node<K,V>[] newTab = (Node<K,V>[])new Node[newCap];
    table = newTab;
    if (oldTab != null) {
        for (int j = 0; j < oldCap; ++j) {
            Node<K,V> e;
            if ((e = oldTab[j]) != null) {
                oldTab[j] = null;
                if (e.next == null)
                    newTab[e.hash & (newCap - 1)] = e;
                else if (e instanceof TreeNode)
                    ((TreeNode<K,V>)e).split(this, newTab, j, oldCap);
                else { // preserve order
                    Node<K,V> loHead = null, loTail = null;
                    Node<K,V> hiHead = null, hiTail = null;
                    Node<K,V> next;
                    do {
                        next = e.next;
                        if ((e.hash & oldCap) == 0) {
                            if (loTail == null)
                                loHead = e;
                            else
                                loTail.next = e;
                            loTail = e;
                        }
                        else {
                            if (hiTail == null)
                                hiHead = e;
                            else
                                hiTail.next = e;
                            hiTail = e;
                        }
                    } while ((e = next) != null);
                    if (loTail != null) {
                        loTail.next = null;
                        newTab[j] = loHead;
                    }
                    if (hiTail != null) {
                        hiTail.next = null;
                        newTab[j + oldCap] = hiHead;
                    }
                }
            }
        }
    }
    return newTab;
}
// tree模式添加数据
final TreeNode<K,V> putTreeVal(HashMap<K,V> map, Node<K,V>[] tab,
                                       int h, K k, V v) {
    Class<?> kc = null;
    boolean searched = false;
    TreeNode<K,V> root = (parent != null) ? root() : this;
    for (TreeNode<K,V> p = root;;) {
        int dir, ph; K pk;
        if ((ph = p.hash) > h)
            dir = -1;
        else if (ph < h)
            dir = 1;
        else if ((pk = p.key) == k || (k != null && k.equals(pk)))
            return p;
        else if ((kc == null &&
                  (kc = comparableClassFor(k)) == null) ||
                 (dir = compareComparables(kc, k, pk)) == 0) {
            if (!searched) {
                TreeNode<K,V> q, ch;
                searched = true;
                if (((ch = p.left) != null &&
                     (q = ch.find(h, k, kc)) != null) ||
                    ((ch = p.right) != null &&
                     (q = ch.find(h, k, kc)) != null))
                    return q;
            }
            dir = tieBreakOrder(k, pk);
        }

        TreeNode<K,V> xp = p;
        if ((p = (dir <= 0) ? p.left : p.right) == null) {
            Node<K,V> xpn = xp.next;
            TreeNode<K,V> x = map.newTreeNode(h, k, v, xpn);
            if (dir <= 0)
                xp.left = x;
            else
                xp.right = x;
            xp.next = x;
            x.parent = x.prev = xp;
            if (xpn != null)
                ((TreeNode<K,V>)xpn).prev = x;
            moveRootToFront(tab, balanceInsertion(root, x));
            return null;
        }
    }
}
public V putIfAbsent(K key, V value) {
    return putVal(hash(key), key, value, true, true);
}
{% endhighlight %}
put：不管key存不存在，都可以往hashmap塞数据，如果存在则替代；
putIfAbsent：只有key不存在，才可以往hashmap塞数据

- 获取KV数据：public V get(Object key)
{% highlight Java %}
public V get(Object key) {
    Node<K,V> e;
    return (e = getNode(hash(key), key)) == null ? null : e.value;
}
final Node<K,V> getNode(int hash, Object key) {
    Node<K,V>[] tab; Node<K,V> first, e; int n; K k;
    if ((tab = table) != null && (n = tab.length) > 0 &&
        (first = tab[(n - 1) & hash]) != null) {
        if (first.hash == hash && // always check first node
            ((k = first.key) == key || (key != null && key.equals(k))))
            return first;
        if ((e = first.next) != null) {
            // 如果节点是树节点，则按照tree模式来获取数据
            if (first instanceof TreeNode)
                return ((TreeNode<K,V>)first).getTreeNode(hash, key);
            // 否则，按照链表模式来获取数据
            do {
                if (e.hash == hash &&
                    ((k = e.key) == key || (key != null && key.equals(k))))
                    return e;
            } while ((e = e.next) != null);
        }
    }
    return null;
}
// 按照tree模式来获取对应的数据节点
final TreeNode<K,V> getTreeNode(int h, Object k) {
    return ((parent != null) ? root() : this).find(h, k, null);
}
final TreeNode<K,V> find(int h, Object k, Class<?> kc) {
    TreeNode<K,V> p = this;
    do {
        int ph, dir; K pk;
        TreeNode<K,V> pl = p.left, pr = p.right, q;
        if ((ph = p.hash) > h)
            p = pl;
        else if (ph < h)
            p = pr;
        else if ((pk = p.key) == k || (k != null && k.equals(pk)))
            return p;
        else if (pl == null)
            p = pr;
        else if (pr == null)
            p = pl;
        else if ((kc != null ||
                  (kc = comparableClassFor(k)) != null) &&
                 (dir = compareComparables(kc, k, pk)) != 0)
            p = (dir < 0) ? pl : pr;
        else if ((q = pr.find(h, k, kc)) != null)
            return q;
        else
            p = pl;
    } while (p != null);
    return null;
}
{% endhighlight %}
总结：1.8后的HashMap都是通过红黑树来实现的。一个链表长度小于8，则是普通链表；否则是红黑树链表存储

#### 线程不安全
1. 添加元素时，会触发变形操作，eg：数组扩容、链表转红黑树操作
2. 添加元素时，挂载节点时，会数据冲突，比如，两个线程同时向一个数组空桶插入数据，第一个和第二个都会检测到空桶，插入时出现冲突
3. 删除元素时，也可能会出现，数据多线程不一样情况
4. ………………

### HashTable的实现
#### 字段
1. Entry<?,?>[] table => 同HashMap一样，数组桶
2. int count => KV数据量的统计
3. float loadFactor => hash的负载因子
4. int modCount =>
5. int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8 => 数组最大的长度
6. volatile Set<K> keySet => 存放key值的set容器
7. volatile Set<Map.Entry<K,V>> entrySet => 存放实体的set容器
8. volatile Collection<V> values => 存放value的容器
9. int KEYS = 0, int VALUES = 1, int ENTRIES = 2 => 枚举类型

#### 构造方法
1. public Hashtable(int initialCapacity, float loadFactor)
2. public Hashtable(int initialCapacity)
3. public Hashtable()
4. public Hashtable(Map<? extends K, ? extends V> t)

{% highlight Java %}
public Hashtable(int initialCapacity, float loadFactor) {
    if (initialCapacity < 0)
        throw new IllegalArgumentException("Illegal Capacity: "+
                                           initialCapacity);
    if (loadFactor <= 0 || Float.isNaN(loadFactor))
        throw new IllegalArgumentException("Illegal Load: "+loadFactor);

    if (initialCapacity==0)
        initialCapacity = 1;
    this.loadFactor = loadFactor;
    table = new Entry<?,?>[initialCapacity];
    threshold = (int)Math.min(initialCapacity * loadFactor, MAX_ARRAY_SIZE + 1);
}
{% endhighlight %}

#### 方法
- 插入数据：public synchronized V put(K key, V value)
{% highlight Java %}
public synchronized V put(K key, V value) {
    // Make sure the value is not null
    if (value == null) {
        throw new NullPointerException();
    }

    // Makes sure the key is not already in the hashtable.
    Entry<?,?> tab[] = table;
    int hash = key.hashCode();
    int index = (hash & 0x7FFFFFFF) % tab.length;
    @SuppressWarnings("unchecked")
    Entry<K,V> entry = (Entry<K,V>)tab[index];
    for(; entry != null ; entry = entry.next) {
        if ((entry.hash == hash) && entry.key.equals(key)) {
            V old = entry.value;
            entry.value = value;
            return old;
        }
    }

    addEntry(hash, key, value, index);
    return null;
}
private void addEntry(int hash, K key, V value, int index) {
    modCount++;

    Entry<?,?> tab[] = table;
    if (count >= threshold) {
        // Rehash the table if the threshold is exceeded
        rehash();

        tab = table;
        hash = key.hashCode();
        index = (hash & 0x7FFFFFFF) % tab.length;
    }

    // Creates the new entry.
    @SuppressWarnings("unchecked")
    Entry<K,V> e = (Entry<K,V>) tab[index];
    tab[index] = new Entry<>(hash, key, value, e);
    count++;
}
{% endhighlight %}
总结：从synchronized关键字来看，该方法是线程安全的，同时会对V值进行null校验；如果在非空数组桶中，则按照链表递归查找插入，否则，调用addEntry方法，当然容量上达到阈值，会进行扩容。

- 获取元素
{% highlight Java %}
public synchronized V get(Object key) {
    Entry<?,?> tab[] = table;
    int hash = key.hashCode();
    int index = (hash & 0x7FFFFFFF) % tab.length;
    for (Entry<?,?> e = tab[index] ; e != null ; e = e.next) {
        if ((e.hash == hash) && e.key.equals(key)) {
            return (V)e.value;
        }
    }
    return null;
}
{% endhighlight %}
其实，没什么可说的，该方法是同步线程安全的，如果不存在返回空。

**通过两个util包下的Hash实现的学习，我基本了解了map的原理，下面学习JUC包下的ConcurrentHashMap**

### 构造方法
1. public ConcurrentHashMap()
2. public ConcurrentHashMap(int initialCapacity)
3. public ConcurrentHashMap(Map<? extends K, ? extends V> m)
4. public ConcurrentHashMap(int initialCapacity, float loadFactor)
5. public ConcurrentHashMap(int initialCapacity, float loadFactor, int concurrencyLevel)

### 方法
- 插入元素

{% highlight Java %}
public V put(K key, V value) {
    return putVal(key, value, false);
}
final V putVal(K key, V value, boolean onlyIfAbsent) {
    // 非空校验
    if (key == null || value == null) throw new NullPointerException();
    int hash = spread(key.hashCode());
    int binCount = 0;
    // tab即为数组桶
    for (Node<K,V>[] tab = table;;) {
        Node<K,V> f; int n, i, fh;
        // 如果为空或长度为0，进行数组桶初始化
        if (tab == null || (n = tab.length) == 0)
            tab = initTable();
        // 获得桶链表赋予f，如果为null
        else if ((f = tabAt(tab, i = (n - 1) & hash)) == null) {
            /*
            static final <K,V> boolean casTabAt(Node<K,V>[] tab, int i,
                                                    Node<K,V> c, Node<K,V> v) {
                return U.compareAndSwapObject(tab, ((long)i << ASHIFT) + ABASE, c, v);
            }
             */
            // 如果设置成功后，即跳出循环，完成插入操作，
            // 如果设置不成功，证明有其他的线程已经插入数据了，继续下一步
            if (casTabAt(tab, i, null,
                         new Node<K,V>(hash, key, value, null)))
                break;                   // no lock when adding to empty bin
        }
        // 如果遍历到ForwardingNode节点  说明这个点已经被处理过了 直接跳过
        else if ((fh = f.hash) == MOVED)
            tab = helpTransfer(tab, f);
        else {
            V oldVal = null;
            // 对该链表加锁
            synchronized (f) {
                // 如果f是数组桶中链表头，添加元素数据
                if (tabAt(tab, i) == f) {
                    if (fh >= 0) {
                        binCount = 1;
                        for (Node<K,V> e = f;; ++binCount) {
                            K ek;
                            if (e.hash == hash &&
                                ((ek = e.key) == key ||
                                 (ek != null && key.equals(ek)))) {
                                oldVal = e.val;
                                if (!onlyIfAbsent)
                                    e.val = value;
                                break;
                            }
                            Node<K,V> pred = e;
                            if ((e = e.next) == null) {
                                pred.next = new Node<K,V>(hash, key,
                                                          value, null);
                                break;
                            }
                        }
                    }
                    // 如果节点是tree模型
                    else if (f instanceof TreeBin) {
                        Node<K,V> p;
                        binCount = 2;
                        // 插入树节点
                        if ((p = ((TreeBin<K,V>)f).putTreeVal(hash, key,
                                                       value)) != null) {
                            oldVal = p.val;
                            if (!onlyIfAbsent)
                                p.val = value;
                        }
                    }
                }
            }
            if (binCount != 0) {
                if (binCount >= TREEIFY_THRESHOLD)
                    // 如果达到阈值，将链表转换成tree模型
                    // 该方法使用synchronized关键字，保证了线程安全
                    treeifyBin(tab, i);
                if (oldVal != null)
                    return oldVal;
                break;
            }
        }
    }
    // 使用CAS方式来增加个数
    addCount(1L, binCount);
    return null;
}
private final void treeifyBin(Node<K,V>[] tab, int index) {
    Node<K,V> b; int n, sc;
    if (tab != null) {
        if ((n = tab.length) < MIN_TREEIFY_CAPACITY)
            tryPresize(n << 1);
        else if ((b = tabAt(tab, index)) != null && b.hash >= 0) {
            synchronized (b) {
                if (tabAt(tab, index) == b) {
                    TreeNode<K,V> hd = null, tl = null;
                    for (Node<K,V> e = b; e != null; e = e.next) {
                        TreeNode<K,V> p =
                            new TreeNode<K,V>(e.hash, e.key, e.val,
                                              null, null);
                        if ((p.prev = tl) == null)
                            hd = p;
                        else
                            tl.next = p;
                        tl = p;
                    }
                    setTabAt(tab, index, new TreeBin<K,V>(hd));
                }
            }
        }
    }
}
private final void addCount(long x, int check) {
    CounterCell[] as; long b, s;
    if ((as = counterCells) != null ||
        !U.compareAndSwapLong(this, BASECOUNT, b = baseCount, s = b + x)) {
        CounterCell a; long v; int m;
        boolean uncontended = true;
        if (as == null || (m = as.length - 1) < 0 ||
            (a = as[ThreadLocalRandom.getProbe() & m]) == null ||
            !(uncontended =
              U.compareAndSwapLong(a, CELLVALUE, v = a.value, v + x))) {
            fullAddCount(x, uncontended);
            return;
        }
        if (check <= 1)
            return;
        s = sumCount();
    }
    // 同时检测是否需要进行扩容
    if (check >= 0) {
        Node<K,V>[] tab, nt; int n, sc;
        // sizeCtl是该数组在初始化，还是扩容的控制变量
        while (s >= (long)(sc = sizeCtl) && (tab = table) != null &&
               (n = tab.length) < MAXIMUM_CAPACITY) {
            int rs = resizeStamp(n);
            // 如果小于0则需要扩容，其中
            // 负数代表正在进行初始化或扩容操作
            // -1代表正在初始化
            // -N 表示有N-1个线程正在进行扩容操作
            // 正数或0代表hash表还没有被初始化，这个数值表示初始化或下一次进行扩容的大小，这一点类似于扩容阈值的概念
            // 它的值始终是当前ConcurrentHashMap容量的0.75倍，这与loadfactor是对应的。
            if (sc < 0) {
                if ((sc >>> RESIZE_STAMP_SHIFT) != rs || sc == rs + 1 ||
                    sc == rs + MAX_RESIZERS || (nt = nextTable) == null ||
                    transferIndex <= 0)
                    break;
                if (U.compareAndSwapInt(this, SIZECTL, sc, sc + 1))
                    transfer(tab, nt);
            }
            else if (U.compareAndSwapInt(this, SIZECTL, sc,
                                         (rs << RESIZE_STAMP_SHIFT) + 2))
                transfer(tab, null);
            s = sumCount();
        }
    }
}
{% endhighlight %}
总结：显然，该添加方法是将锁粒度细化，同时在添加时，先进行CAS校验，然后再用锁机制来保证。在添加的过程，同HashMap一样会出现链表和tree两种模型的切换，而此时的树模型是TreeBin类，它是对TreeNode进行一层包装，在TreeBin类中进行众多的CAS操作等，即不断无锁操作和细粒度化的操作保证高并发性。


- 获取元素

{% highlight Java %}
public V get(Object key) {
    Node<K,V>[] tab; Node<K,V> e, p; int n, eh; K ek;
    int h = spread(key.hashCode());
    if ((tab = table) != null && (n = tab.length) > 0 &&
        (e = tabAt(tab, (n - 1) & h)) != null) {
        if ((eh = e.hash) == h) {
            if ((ek = e.key) == key || (ek != null && key.equals(ek)))
                return e.val;
        }
        else if (eh < 0)
            return (p = e.find(h, key)) != null ? p.val : null;
        while ((e = e.next) != null) {
            if (e.hash == h &&
                ((ek = e.key) == key || (ek != null && key.equals(ek))))
                return e.val;
        }
    }
    return null;
}
{% endhighlight %}
在get操作中，只通过tabAt中的CAS操作即可保证了高并发性。给定一个key来确定value的时候，必须满足两个条件  key相同  hash值相同，对于节点可能在链表或树上的情况，需要分别去查找。


## CopyOnWriteArrayList的实现

### 基本概念
1. 从名字上就可以知道，这是一个List容器
2. 这是当写时就重新复制整个容器

### 字段
1. ReentrantLock lock = new ReentrantLock() => 重入锁
2. volatile Object[] array => 存放数据的数组
3. long lockOffset => 锁的偏移？
4. sun.misc.Unsafe UNSAFE => 用于直接内存申请

### 构造方法
1. public CopyOnWriteArrayList()
2. public CopyOnWriteArrayList(Collection<? extends E> c)
3. public CopyOnWriteArrayList(E[] toCopyIn)

### 方法
- 获取元素：public E get(int index)

{% highlight Java %}
public E get(int index) {
    return get(getArray(), index);
}
private E get(Object[] a, int index) {
    return (E) a[index];
}
final Object[] getArray() {
    return array;
}
{% endhighlight %}

- 添加元素

{% highlight Java %}
public boolean add(E e) {
    final ReentrantLock lock = this.lock;
    // 拿锁
    lock.lock();
    try {
        // 获得数组
        Object[] elements = getArray();
        // 获得长度
        int len = elements.length;
        // 创建一个新数组，较之前那个大1
        Object[] newElements = Arrays.copyOf(elements, len + 1);
        // 插入元素
        newElements[len] = e;
        // 引用回写
        setArray(newElements);
        return true;
    } finally {
        lock.unlock();
    }
}
final void setArray(Object[] a) {
    array = a;
}

public void add(int index, E element) {
    final ReentrantLock lock = this.lock;
    // 拿锁
    lock.lock();
    try {
        Object[] elements = getArray();
        int len = elements.length;
        // 如果索引越界，抛异常
        if (index > len || index < 0)
            throw new IndexOutOfBoundsException("Index: "+index+
                                                ", Size: "+len);
        Object[] newElements;
        int numMoved = len - index;
        if (numMoved == 0)
            // 如果需要重新创建，和上面方法类似
            newElements = Arrays.copyOf(elements, len + 1);
        else {
            newElements = new Object[len + 1];
            System.arraycopy(elements, 0, newElements, 0, index);
            System.arraycopy(elements, index, newElements, index + 1,
                             numMoved);
        }
        newElements[index] = element;
        setArray(newElements);
    } finally {
        lock.unlock();
    }
}
{% endhighlight %}

- 删除元素
{% highlight Java %}
public E remove(int index) {
    final ReentrantLock lock = this.lock;
    lock.lock();
    try {
        Object[] elements = getArray();
        int len = elements.length;
        E oldValue = get(elements, index);
        int numMoved = len - index - 1;
        if (numMoved == 0)
            // 同样的，还是需要重新申请数组
            setArray(Arrays.copyOf(elements, len - 1));
        else {
            // 也是申请一个新数组
            Object[] newElements = new Object[len - 1];
            System.arraycopy(elements, 0, newElements, 0, index);
            System.arraycopy(elements, index + 1, newElements, index,
                             numMoved);
            setArray(newElements);
        }
        return oldValue;
    } finally {
        lock.unlock();
    }
}
{% endhighlight %}
总结：CopyOnWriteArrayList类除了get操作是无需创建新数组，而其他的add、remove等操作都是会去触发创建新的数组，所以该类适用于读多写少操作。它无法保证实时一致性，只能保证最终一致性。

## CopyOnWriteArraySet的实现

**这个类也是COW技术的延续，而容器是使用set模型，不允许重复元素而已。优缺点与CopyOnWriteArrayList一样，不细说了。**
