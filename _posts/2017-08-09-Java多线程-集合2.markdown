---
layout: post
title: "Java多线程5"
date: "2017-08-09 12:00:00 +0800"
categories: Java
tags: Java多线程
excerpt: Java多线程-集合2
mathjax: true
---

* content
{:toc}

继续上一篇对JUC中集合一下分析和总结，那么就把队列结束掉吧
1. ConcurrentLinkedQueue
2. DelayQueue
3. PriorityBlockingQueue

## ConcurrentLinkedQueue的实现

### 基本概念
1. 一个无界的
2. 非阻塞的
3. 链表实现的
4. 队列

### 字段
1. volatile Node<E> head => 链表头
2. volatile Node<E> tail => 链表尾
3. static final sun.misc.Unsafe UNSAFE => 自己分配内存
4. static final long headOffset => 链表头的偏移
5. static final long tailOffset => 链表尾的偏移

### 构造方法
1. public ConcurrentLinkedQueue()
2. public ConcurrentLinkedQueue(Collection<? extends E> c)

### 方法
- 插入元素：public boolean offer(E e)
{% highlight Java %}
public boolean offer(E e) {
    checkNotNull(e);
    // 创建新的节点
    final Node<E> newNode = new Node<E>(e);
    // t是链表的尾部，p也指向链表的尾部
    for (Node<E> t = tail, p = t;;) {
        // 将p的下游节点引用指向q
        Node<E> q = p.next;
        if (q == null) {
            // p is last node
            // 如果q为空，则p为最后一个节点
            // 底层使用CAS算法，为空更新为newNode
            if (p.casNext(null, newNode)) {
                // 如果当前不是链表尾，则进行casTail更新链表尾端
                if (p != t) // hop two nodes at a time
                    casTail(t, newNode);  // Failure is OK.
                return true;
            }
        }
        else if (p == q)
            p = (t != (t = tail)) ? t : head;
        else
            p = (p != t && t != (t = tail)) ? t : q;
    }
}
// private static class Node<E>
boolean casNext(Node<E> cmp, Node<E> val) {
    // nextOffset= UNSAFE.objectFieldOffset(k.getDeclaredField("next"));
    // 在Node类中声明的变量名next
    return UNSAFE.compareAndSwapObject(this, nextOffset, cmp, val);
}
// casNext会去调用UNSAFE.compareAndSwapObject(this, nextOffset, cmp, val);
// compareAndSwapObject(Object var1, long var2, Object var3, Object var4)
// 变量1：包含要修改field的对象
// 变量2：object型field的偏移量
// 变量3：希望field中存在的值
// 变量4：如果期望值expect与field的当前值相同，设置filed的值为这个新值
{% endhighlight %}
总结：使用CAS这种原子操作来更新链表结构，等学习Atomic***这些原子类再来细细理解CAS操作

- 获取元素：public E poll()
{% highlight Java %}
public E poll() {
    restartFromHead:
    for (;;) {
        // h是链表的头，p也指向链表头，q为空
        for (Node<E> h = head, p = h, q;;) {
            // item为头中数据
            E item = p.item;
            // 如果非空，且如果能使用null替换成功
            if (item != null && p.casItem(item, null)) {
                if (p != h) // hop two nodes at a time
                    // 更新头部
                    updateHead(h, ((q = p.next) != null) ? q : p);
                return item;
            }
            // 如果第二个节点为空，即只有一个节点
            else if ((q = p.next) == null) {
                updateHead(h, p);
                return null;
            }
            // 如果单一节点
            else if (p == q)
                continue restartFromHead;
            else
                p = q;
        }
    }
}
boolean casItem(E cmp, E val) {
    return UNSAFE.compareAndSwapObject(this, itemOffset, cmp, val);
}
{% endhighlight %}

- 对当前是否为空判断，使用isEmpty，不要使用size，因为size方法会遍历


## PriorityQueue的实现

### 基本概念
1. 无界
2. 具有优先级先后顺序
3. 非阻塞
4. 不是JUC包下的

### 变量
1. int DEFAULT_INITIAL_CAPACITY = 11 => 默认初始的队列容量
2. Object[] queue => 用于存放数据的数组，即优先级队列是使用数组来存储数据的
3. int size => 队列元素个数
4. Comparator<? super E> comparator => 即该元素遵循的排列器
5. int modCount => 该队列结构的变换次数

### 构造方法
1. public PriorityQueue() => 使用默认容量来构造一个无优先级顺序性的队列
2. public PriorityQueue(int initialCapacity) => 设置容量大小
3. public PriorityQueue(Comparator<? super E> comparator) => 设置元素依赖的比较器
4. public PriorityQueue(int initialCapacity, Comparator<? super E> comparator) => 同时提供容量和比较器
5. public PriorityQueue(Collection<? extends E> c) =>
6. public PriorityQueue(PriorityQueue<? extends E> c) =>
7. public PriorityQueue(SortedSet<? extends E> c) =>

### 方法
- 添加
{% highlight Java %}
public boolean offer(E e) {
    if (e == null)
        throw new NullPointerException();
    modCount++;
    int i = size;
    if (i >= queue.length)
        grow(i + 1);
    size = i + 1;
    if (i == 0)
        queue[0] = e;
    else
        siftUp(i, e);
    return true;
}
private void grow(int minCapacity) {
    int oldCapacity = queue.length;
    // Double size if small; else grow by 50%
    int newCapacity = oldCapacity + ((oldCapacity < 64) ?
                                     (oldCapacity + 2) :
                                     (oldCapacity >> 1));
    // overflow-conscious code
    if (newCapacity - MAX_ARRAY_SIZE > 0)
        newCapacity = hugeCapacity(minCapacity);
    queue = Arrays.copyOf(queue, newCapacity);
}
public E poll() {
    if (size == 0)
        return null;
    int s = --size;
    modCount++;
    E result = (E) queue[0];
    E x = (E) queue[s];
    queue[s] = null;
    if (s != 0)
        siftDown(0, x);
    return result;
}
private void siftDown(int k, E x) {
    if (comparator != null)
        siftDownUsingComparator(k, x);
    else
        siftDownComparable(k, x);
}
{% endhighlight %}
总结：offer会触发数组扩充，如果比较小，数组就扩展一倍；如果其他情况，就按照50%的扩展。显然这个是非线程安全的操作，如果一个线程正在扩容，而另一个线程正在进行其他的操作；同样在获取数据也存在线程安全问题。显然，存是插入顺序，而获取则按照比较器来排序输出

## PriorityBlockingQueue的实现

### 基本概念
1. 无界
2. 具有优先级先后顺序
3. 阻塞

### 变量
1. int DEFAULT_INITIAL_CAPACITY = 11 => 初始容量
2. int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8 => 数组最大的大小，可是为什么要减8
3. Object[] queue => 存储的队列数组
4. Comparator<? super E> comparator => 队列的元素比较器
5. int size => 当前队列的个数
6. ReentrantLock lock => 用于所有共有方法的锁
7. final Condition notEmpty => 非空信号量
8. volatile int allocationSpinLock => 用于分配的旋转锁
9. PriorityQueue<E> q => 用于序列化，保持与以前版本的兼容

### 构造方法
1. public PriorityBlockingQueue()
2. public PriorityBlockingQueue(int initialCapacity)
3. public PriorityBlockingQueue(int initialCapacity, Comparator<? super E> comparator)
4. public PriorityBlockingQueue(Collection<? extends E> c)

### 方法
- 插入数据：add、offer、put方法

{% highlight Java %}
public boolean add(E e) {
    return offer(e);
}
public boolean offer(E e) {
    if (e == null)
        throw new NullPointerException();
    final ReentrantLock lock = this.lock;
    lock.lock();
    int n, cap;
    Object[] array;
    while ((n = size) >= (cap = (array = queue).length))
        tryGrow(array, cap);
    try {
        Comparator<? super E> cmp = comparator;
        if (cmp == null)
            siftUpComparable(n, e, array);
        else
            siftUpUsingComparator(n, e, array, cmp);
        size = n + 1;
        notEmpty.signal();
    } finally {
        lock.unlock();
    }
    return true;
}

public void put(E e) {
    offer(e); // never need to block
}

public boolean offer(E e, long timeout, TimeUnit unit) {
    return offer(e); // never need to block
}

// 对队列容量进行扩容
private void tryGrow(Object[] array, int oldCap) {
    lock.unlock(); // must release and then re-acquire main lock
    Object[] newArray = null;
    if (allocationSpinLock == 0 &&
        UNSAFE.compareAndSwapInt(this, allocationSpinLockOffset,
                                 0, 1)) {
        try {
            int newCap = oldCap + ((oldCap < 64) ?
                                   (oldCap + 2) : // grow faster if small
                                   (oldCap >> 1));
            if (newCap - MAX_ARRAY_SIZE > 0) {    // possible overflow
                int minCap = oldCap + 1;
                if (minCap < 0 || minCap > MAX_ARRAY_SIZE)
                    throw new OutOfMemoryError();
                newCap = MAX_ARRAY_SIZE;
            }
            if (newCap > oldCap && queue == array)
                newArray = new Object[newCap];
        } finally {
            allocationSpinLock = 0;
        }
    }
    if (newArray == null) // back off if another thread is allocating
        Thread.yield();
    lock.lock();
    if (newArray != null && queue == array) {
        queue = newArray;
        System.arraycopy(array, 0, newArray, 0, oldCap);
    }
}
private static <T> void siftUpComparable(int k, T x, Object[] array) {
    Comparable<? super T> key = (Comparable<? super T>) x;
    while (k > 0) {
        int parent = (k - 1) >>> 1;
        Object e = array[parent];
        if (key.compareTo((T) e) >= 0)
            break;
        array[k] = e;
        k = parent;
    }
    array[k] = key;
}

private static <T> void siftUpUsingComparator(int k, T x, Object[] array,
                                   Comparator<? super T> cmp) {
    while (k > 0) {
        int parent = (k - 1) >>> 1;
        // 确定最后一位数据，然后进行移位操作
        Object e = array[parent];
        if (cmp.compare(x, (T) e) >= 0)
            break;
        array[k] = e;
        k = parent;
    }
    array[k] = x;
}
{% endhighlight %}
流程解析：拿锁，如果元素个数大于等于当前队列的长度，则去扩容队列，然后按照是否有比较器来排序，插入成功后触发队列非空信号。在队列扩容的时候，会放弃锁，然后通过一种乐观锁的机制(CAS)来扩展队列空间，在多线程的情况下if (newArray == null)，那就让Thread.yield()线程让出CPU资源，然后再加锁，更新队列存储数组。
总结：从代码中，我们发现，所有插入方法落脚点都是offer方法。而且可以看出那个数组存储的数据元素就是有序的(按照优先级顺序来的)

- 获取数据：poll、take、peek方法
{% highlight Java %}
public E poll() {
    final ReentrantLock lock = this.lock;
    lock.lock();
    try {
        return dequeue();
    } finally {
        lock.unlock();
    }
}
public E take() throws InterruptedException {
    final ReentrantLock lock = this.lock;
    lock.lockInterruptibly();
    E result;
    try {
        while ( (result = dequeue()) == null)
            notEmpty.await();
    } finally {
        lock.unlock();
    }
    return result;
}
public E poll(long timeout, TimeUnit unit) throws InterruptedException {
    long nanos = unit.toNanos(timeout);
    final ReentrantLock lock = this.lock;
    lock.lockInterruptibly();
    E result;
    try {
        while ( (result = dequeue()) == null && nanos > 0)
            nanos = notEmpty.awaitNanos(nanos);
    } finally {
        lock.unlock();
    }
    return result;
}
public E peek() {
    final ReentrantLock lock = this.lock;
    lock.lock();
    try {
        return (size == 0) ? null : (E) queue[0];
    } finally {
        lock.unlock();
    }
}
{% endhighlight %}
总结：这几个方法，挺容易看的明白，就不解析了。
