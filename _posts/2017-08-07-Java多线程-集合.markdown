---
layout: post
title: "Java多线程4"
date: "2017-08-07 12:00:00 +0800"
categories: Java
tags: Java多线程
excerpt: Java多线程-集合
mathjax: true
---

* content
{:toc}

## JUC包中集合
为高并发提供的一些集合类

### 接口
1. BlockingDeque => 阻塞的双端队列
2. BlockingQueue => 阻塞的队列
3. ConcurrentMap => 线程安全的的KV存储
4. ConcurrentNavigableMap => 有序KV存储
5. TransferQueue => 生产者会一直阻塞直到所添加到队列的元素被某一个消费者所消费(不仅仅是添加到队列里就完事)

### 实现类
1. ArrayBlockingQueue => 通过数组形式实现的BlockingQueue※
2. ConcurrentHashMap => key非空，线程安全※
3. ConcurrentLinkedDeque => 基于链表的无限空间双端队列
4. ConcurrentLinkedQueue => 基于链表的无限空间队列※
5. ConcurrentSkipListMap => ConcurrentNavigableMap的实现
6. ConcurrentSkipListSet => 有序的Set集合(应该说是迭代取元素时，显示有序)
7. CopyOnWriteArrayList => 写时，复制，基于数组的列表实现※
8. CopyOnWriteArraySet => 写时，复制，基于数组的集合实现※
9. DelayQueue => 延时队列※
10. LinkedBlockingDeque => 可选择的大小的阻塞双端队列，基于链表实现
11. LinkedBlockingQueue => 可选择的大小的阻塞队列，基于链表实现※
12. LinkedTransferQueue => 接口TransferQueue的实现
13. PriorityBlockingQueue => 带有优先级的阻塞队列※
14. SynchronousQueue => 必须不同的线程来进行数据通信

**带有※号的，在下面会着重去了解底层实现原理**

## ArrayBlockingQueue的实现

### 基本概念
1. 通过数组来存储数据
2. 有界阻塞，如果存储空间满了，则不允许向该队列插入数据；如果当前空间为空，则不允许从该队列中获取数据
3. 线程安全，通过ReentrantLock锁来保证
4. 通过Condition来保证两个极限状态数组为空、数组已满

### 字段
1. Object[] items => 当前队列容量
2. int takeIndex => 获取的索引
3. int putIndex => 插入的索引
4. int count => 当前队列数目
5. ReentrantLock lock => 重入锁
6. Condition notEmpty => 条件变量非空
7. Condition notFull => 条件变量非满

### 构造方法
1. public ArrayBlockingQueue(int capacity)
2. public ArrayBlockingQueue(int capacity, boolean fair)
3. public ArrayBlockingQueue(int capacity, boolean fair, Collection<? extends E> c)

### 方法

- 添加元素，非阻塞，返回标记值：public boolean add(E e)、public boolean offer(E e)
{% highlight Java %}
// ArrayBlockingQueue
public boolean add(E e) {
    return super.add(e);
}
// AbstractQueue
public boolean add(E e) {
    if (offer(e))
        return true;
    else
        throw new IllegalStateException("Queue full");
}
// ArrayBlockingQueue
public boolean offer(E e) {
    checkNotNull(e);
    final ReentrantLock lock = this.lock;
    lock.lock();
    try {
        if (count == items.length)
            return false;
        else {
            enqueue(e);
            return true;
        }
    } finally {
        lock.unlock();
    }
}
private void enqueue(E x) {
    // assert lock.getHoldCount() == 1;
    // assert items[putIndex] == null;
    final Object[] items = this.items;
    items[putIndex] = x;
    if (++putIndex == items.length)
        putIndex = 0;
    count++;
    notEmpty.signal();
}
{% endhighlight %}
总结：我们发现ArrayBlockingQueue的add方法会调用父类AbstractQueue的add方法，而父类的add方法需要调用接口offer方法，该接口方法在ArrayBlockingQueue子类中实现，即最终核心代码是offer方法。该方法中使用重入锁来保证多线程安全，enqueue方法添加到数组中，然后唤醒非空状态。所以，我可以发现add和offer方法是同样作用的。

- 添加元素，阻塞，无返回值：public void put(E e)
{% highlight Java %}
// ArrayBlockingQueue
public void put(E e) throws InterruptedException {
    checkNotNull(e);
    final ReentrantLock lock = this.lock;
    lock.lockInterruptibly();
    try {
        while (count == items.length)
            notFull.await();
        enqueue(e);
    } finally {
        lock.unlock();
    }
}
private void enqueue(E x) {
    // assert lock.getHoldCount() == 1;
    // assert items[putIndex] == null;
    final Object[] items = this.items;
    items[putIndex] = x;
    if (++putIndex == items.length)
        putIndex = 0;
    count++;
    notEmpty.signal();
}
{% endhighlight %}
总结：其中，lock()提供了无条件地轮询获取锁的方式，lockInterruptibly()提供了可中断的锁获取方式。添加元素，先拿锁，如果当前个数与数组容量相等，则一直等待非满条件变量释放，否则添加成功

- 等待时间添加元素，阻塞，返回标记值：public boolean offer(E e, long timeout, TimeUnit unit)
{% highlight Java %}
// ArrayBlockingQueue
public boolean offer(E e, long timeout, TimeUnit unit)
    throws InterruptedException {
    checkNotNull(e);
    long nanos = unit.toNanos(timeout);
    final ReentrantLock lock = this.lock;
    lock.lockInterruptibly();
    try {
        while (count == items.length) {
            if (nanos <= 0)
                return false;
            nanos = notFull.awaitNanos(nanos);
        }
        enqueue(e);
        return true;
    } finally {
        lock.unlock();
    }
}
{% endhighlight %}
总结：offer类似put，只是在while循环中，对时间多一个判断

- 获取元素，不阻塞，返回数据，如果不能获取的话，就返回null：public E poll()
{% highlight Java %}
// ArrayBlockingQueue
public E poll() {
    final ReentrantLock lock = this.lock;
    lock.lock();
    try {
        return (count == 0) ? null : dequeue();
    } finally {
        lock.unlock();
    }
}
private E dequeue() {
    // assert lock.getHoldCount() == 1;
    // assert items[takeIndex] != null;
    final Object[] items = this.items;
    @SuppressWarnings("unchecked")
    E x = (E) items[takeIndex];
    items[takeIndex] = null;
    if (++takeIndex == items.length)
        takeIndex = 0;
    count--;
    if (itrs != null)
        itrs.elementDequeued();
    notFull.signal();
    return x;
}
// Itrs
// 将元素从迭代器中移出
void elementDequeued() {
    // assert lock.getHoldCount() == 1;
    if (count == 0)
        queueIsEmpty();
    else if (takeIndex == 0)
        takeIndexWrapped();
}
// ...
{% endhighlight %}
总结：这种操作不是阻塞获取，当前可以获取，则返回元素；不可以获取，则返回null，通过迭代器变量来获取元素值

- 阻塞获取元素，如果为空则等待：public E take()
{% highlight Java %}
public E take() throws InterruptedException {
    final ReentrantLock lock = this.lock;
    lock.lockInterruptibly();
    try {
        while (count == 0)
            notEmpty.await();
        return dequeue();
    } finally {
        lock.unlock();
    }
}
{% endhighlight %}
总结：类似put操作，通过可以被打断的lock操作和条件变量来控制阻塞

- 阻塞获取元素，可等待时长：public E poll(long timeout, TimeUnit unit)
{% highlight Java %}
public E poll(long timeout, TimeUnit unit) throws InterruptedException {
    long nanos = unit.toNanos(timeout);
    final ReentrantLock lock = this.lock;
    lock.lockInterruptibly();
    try {
        while (count == 0) {
            if (nanos <= 0)
                return null;
            nanos = notEmpty.awaitNanos(nanos);
        }
        return dequeue();
    } finally {
        lock.unlock();
    }
}
{% endhighlight %}

- 不阻塞获取元素，，且不删除元素：public E peek()
{% highlight Java %}
public E peek() {
    final ReentrantLock lock = this.lock;
    lock.lock();
    try {
        return itemAt(takeIndex); // null when queue is empty
    } finally {
        lock.unlock();
    }
}
final E itemAt(int i) {
    return (E) items[i];
}
{% endhighlight %}
总结：显然该操作没有删除操作，所以该方法只返回数据，不弹出数据

## LinkedBlockingQueue的实现

### 基本概念
1. 存储结构为链表结构
2. 因为是使用链表存储数据元素，理论上是不限容量的
3. 可以有界，也可以无界，关键看是否设置容量

### 字段
1. int capacity => 是该队列的容量，如果不设置则为Integer.MAX_VALUE，即无限大
2. AtomicInteger count => 适用原子变量来存储个数，这个与ArrayBlockingQueue有点不同，个人持有疑问WHY
3. Node<E> head => 链表的头，第一个节点不存储数组，只存储指向的指针，eg：head.item == null
4. Node<E> last => 链表的头，最后一个节点只存数据，不存指针，eg：last.next == null
5. ReentrantLock takeLock => 操作take、poll等操作的锁
6. Condition notEmpty => 非空条件变量，只有获取元素，才会触发非空状态
7. ReentrantLock putLock => 操作put、offer等操作的锁
8. Condition notFull => 非满条件变量，检测添加元素情况

### 构造方法
1. public LinkedBlockingQueue()
2. public LinkedBlockingQueue(int capacity) => 会限制队列大小
3. public LinkedBlockingQueue(Collection<? extends E> c)

### 方法
**同样的，还是从插入数据和获取数据来入手**

- 插入数据，会等待可以插入情况 => public void put(E e)
{% highlight Java %}
public void put(E e) throws InterruptedException {
    if (e == null) throw new NullPointerException();
    // Note: convention in all put/take/etc is to preset local var
    // holding count negative to indicate failure unless set.
    int c = -1;
    Node<E> node = new Node<E>(e);
    final ReentrantLock putLock = this.putLock;
    final AtomicInteger count = this.count;
    putLock.lockInterruptibly();
    try {
        while (count.get() == capacity) {
            notFull.await();
        }
        enqueue(node);
        c = count.getAndIncrement();
        if (c + 1 < capacity)
            notFull.signal();
    } finally {
        putLock.unlock();
    }
    if (c == 0)
        signalNotEmpty();
}
{% endhighlight %}
总结流程：获得当前队列个数，拿插入锁，如果当前个数与容量相等，等待非满条件变量触发，弹出数据，那么个数自增，如果个数小于容量，释放非满条件变量，释放锁，如果个数为零，释放非空条件变量
- 延时插入，如果还是插入不成，则返回false => public boolean offer(E e, long timeout, TimeUnit unit)
{% highlight Java %}
public boolean offer(E e, long timeout, TimeUnit unit)
    throws InterruptedException {
    if (e == null) throw new NullPointerException();
    long nanos = unit.toNanos(timeout);
    int c = -1;
    final ReentrantLock putLock = this.putLock;
    final AtomicInteger count = this.count;
    putLock.lockInterruptibly();
    try {
        while (count.get() == capacity) {
            if (nanos <= 0)
                return false;
            nanos = notFull.awaitNanos(nanos);
        }
        enqueue(new Node<E>(e));
        c = count.getAndIncrement();
        if (c + 1 < capacity)
            notFull.signal();
    } finally {
        putLock.unlock();
    }
    if (c == 0)
        signalNotEmpty();
    return true;
}
{% endhighlight %}
总结：同样的，和ArrayBlockingQueue实现类似，基本步骤与上面的put方法类似，但是多一个时间检测

- public boolean offer(E e)
{% highlight Java %}
public boolean offer(E e) {
    if (e == null) throw new NullPointerException();
    final AtomicInteger count = this.count;
    if (count.get() == capacity)
        return false;
    int c = -1;
    Node<E> node = new Node<E>(e);
    final ReentrantLock putLock = this.putLock;
    putLock.lock();
    try {
        if (count.get() < capacity) {
            enqueue(node);
            c = count.getAndIncrement();
            if (c + 1 < capacity)
                notFull.signal();
        }
    } finally {
        putLock.unlock();
    }
    if (c == 0)
        signalNotEmpty();
    return c >= 0;
}
{% endhighlight %}
总结：基本流程与put方法类似，只是不需要阻塞等待。
